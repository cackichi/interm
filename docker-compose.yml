services:
  mongodb:
    image: mongo:latest
    container_name: mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: fedor
      MONGO_INITDB_ROOT_PASSWORD: fedor
    ports:
      - 27017:27017
    volumes:
      - ./mongodb-data:/data/db
    networks:
      - my_network

  pg:
    container_name: pg
    build:
      context: ./pg-script
      dockerfile: Dockerfile
    volumes:
      - ./.pg:/var/lib/postgresql/data
    environment:
      POSTGRES_MULTIPLE_DATABASES: pg1,pg2,pg3,pg4,keycloakdb
      POSTGRES_USER: fedor
      POSTGRES_PASSWORD: fedor
    ports:
      - "5434:5432"
    networks:
      - my_network

  keycloak:
    image: quay.io/keycloak/keycloak:25.0.2
    container_name: keycloak
    environment:
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://pg:5432/keycloakdb
      KC_DB_USERNAME: fedor
      KC_DB_PASSWORD: fedor

      KC_HTTP_PORT: 7070
      KC_HTTP_ENABLED: true
      KC_HTTPS_ENABLED: false

      KC_HOSTNAME: http://keycloak:7070/
      KC_HOSTNAME_BACKCHANNEL_DYNAMIC: true
      KC_HOSTNAME_STRICT: false
      KC_HOSTNAME_STRICT_HTTPS: false

      KEYCLOAK_ADMIN: fedor
      KEYCLOAK_ADMIN_PASSWORD: fedor
    command: start-dev
    depends_on:
      - pg
    ports:
      - '7070:7070'
    networks:
      - my_network

  kafka:
    image: bitnami/kafka:latest
    ports:
      - '9092:9092'
    environment:
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_KRAFT_CLUSTER_ID=tLAFFbaIRKO2JNyRengxzQ
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9091
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9090,CONTROLLER://:9091,EXTERNAL://:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9090,EXTERNAL://${HOSTNAME:-localhost}:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
    volumes:
      - ./.kafka:/var/lib/kafka/data:/bitnami/kafka
    networks:
      - my_network

  redis:
    image: redis:latest
    container_name: redis
    environment:
      - REDIS_PASSWORD=fedor
      - REDIS_USER=fedor
      - REDIS_USER_PASSWORD=fedor
    ports:
      - "6379:6379"
    volumes:
      - ./redisdata:/data
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    command: >
      sh -c '
        mkdir -p /usr/local/etc/redis &&
        echo "bind 0.0.0.0" > /usr/local/etc/redis/redis.conf &&
        echo "requirepass fedor" >> /usr/local/etc/redis/redis.conf &&
        echo "appendonly yes" >> /usr/local/etc/redis/redis.conf &&
        echo "appendfsync everysec" >> /usr/local/etc/redis/redis.conf &&
        echo "user default on nopass ~* +@all" > /usr/local/etc/redis/users.acl &&
        echo "user fedor on >fedor ~* +@all" >> /usr/local/etc/redis/users.acl &&
        redis-server /usr/local/etc/redis/redis.conf --aclfile /usr/local/etc/redis/users.acl
      '
    healthcheck:
      test: [ "CMD", "redis-cli", "-a", "fedor", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    tty: true
    stdin_open: true
    networks:
      - my_network

  eureka-server:
    build:
      context: ./eureka-server
      dockerfile: Dockerfile
    container_name: eureka-server
    ports:
      - "8080:8080"
    networks:
      - my_network
    depends_on:
      - pg
      - mongodb
      - kafka
      - redis
      - logstash
      - zipkin
      - elasticsearch
      - keycloak
      - grafana
      - prometheus

  driver-service:
    build:
      context: ./driver-service
      dockerfile: Dockerfile
    container_name: driver-service
    environment:
      SPRING_DATA_MONGODB_URI: "mongodb://fedor:fedor@mongodb:27017/drivers?authSource=admin"
      SPRING_DATA_MONGODB_HOST: mongodb
      SPRING_DATA_MONGODB_PORT: 27017
      SPRING_DATA_MONGODB_USERNAME: fedor
      SPRING_DATA_MONGODB_PASSWORD: fedor
      SPRING_DATA_MONGODB_DATABASE: drivers
      SPRING_DATA_MONGODB_AUTHENTICATION_DATABASE: admin
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9090
      ZIPKIN_HOST: http://zipkin:9411
      ELASTIC_HOST: http://elasticsearch:9200
      KEYCLOAK_HOST: keycloak
      EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE: http://eureka-server:8080/eureka
    networks:
      - my_network
    depends_on:
      - eureka-server
      - mongodb

  auth-service:
    build:
      context: ./auth-service
      dockerfile: Dockerfile
    container_name: auth-service
    environment:
      EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE: http://eureka-server:8080/eureka
      KEYCLOAK_HOST: keycloak
    networks:
      - my_network
    depends_on:
      - eureka-server

  passenger-service:
    build:
      context: ./passenger-service
      dockerfile: Dockerfile
    container_name: passenger-service
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://pg:5432/pg1
      SPRING_DATASOURCE_USERNAME: fedor
      SPRING_DATASOURCE_PASSWORD: fedor
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9090
      KEYCLOAK_HOST: keycloak
      ZIPKIN_HOST: http://zipkin:9411
      ELASTIC_HOST: http://elasticsearch:9200
      EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE: http://eureka-server:8080/eureka
    networks:
      - my_network
    depends_on:
      - eureka-server

  payment-service:
    build:
      context: ./payment-service
      dockerfile: Dockerfile
    container_name: payment-service
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://pg:5432/pg4
      SPRING_DATASOURCE_USERNAME: fedor
      SPRING_DATASOURCE_PASSWORD: fedor
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9090
      ZIPKIN_HOST: http://zipkin:9411
      KEYCLOAK_HOST: keycloak
      ELASTIC_HOST: http://elasticsearch:9200
      EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE: http://eureka-server:8080/eureka
    networks:
      - my_network
    depends_on:
      - eureka-server

  rating-service:
    build:
      context: ./rating-service
      dockerfile: Dockerfile
    container_name: rating-service
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://pg:5432/pg3
      SPRING_DATASOURCE_USERNAME: fedor
      SPRING_DATASOURCE_PASSWORD: fedor
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9090
      KEYCLOAK_HOST: keycloak
      ZIPKIN_HOST: http://zipkin:9411
      ELASTIC_HOST: http://elasticsearch:9200
      EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE: http://eureka-server:8080/eureka
    networks:
      - my_network
    depends_on:
      - eureka-server

  rides-service:
    build:
      context: ./rides-service
      dockerfile: Dockerfile
    container_name: rides-service
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://pg:5432/pg2
      SPRING_DATASOURCE_USERNAME: fedor
      SPRING_DATASOURCE_PASSWORD: fedor
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9090
      ZIPKIN_HOST: http://zipkin:9411
      REDIS_HOST: redis
      KEYCLOAK_HOST: keycloak
      ELASTIC_HOST: http://elasticsearch:9200
      EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE: http://eureka-server:8080/eureka
    networks:
      - my_network
    depends_on:
      - eureka-server

  gateway-service:
    build:
      context: ./gateway-service
      dockerfile: Dockerfile
    container_name: gateway-service
    environment:
      EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE: http://eureka-server:8080/eureka
      EUREKA_INSTANCE_PREFER_IP_ADDRESS: "true"
      SPRING_CLOUD_GATEWAY_DISCOVERY_LOCATOR_ENABLED: "false"
      SPRING_CLOUD_GATEWAY_DISCOVERY_LOCATOR_LOWER_CASE_SERVICE_ID: "true"
    ports:
      - "8081:8081"
    networks:
      - my_network
    depends_on:
      - eureka-server
      - passenger-service
      - driver-service
      - rides-service
      - rating-service
      - payment-service
      - auth-service

  kibana:
    image: kibana:8.9.0
    ports:
      - 5601:5601
    environment:
      ELASTICSEARCH_HOSTS: "http://elasticsearch:9200"
    networks:
      - my_network

  elasticsearch:
    image: elasticsearch:8.9.0
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - xpack.security.enabled=false
    volumes:
      - es_data:/usr/share/elasticsearch/data
    ports:
      - 9200:9200
    networks:
      - my_network

  logstash:
    image: logstash:8.9.0
    ports:
      - 5044:5044
    volumes:
      - ./logstash/pipeline:/usr/share/logstash/pipeline
    networks:
      - my_network
    depends_on:
      - elasticsearch

  zipkin:
    image: openzipkin/zipkin
    ports:
      - "9411:9411"
    networks:
      - my_network
    environment:
      - STORAGE_TYPE=elasticsearch
      - ES_HOSTS=elasticsearch:9200
    depends_on:
      - elasticsearch

  grafana:
    image: grafana/grafana
    ports:
      - 3000:3000
    volumes:
      - ./grafana:/etc/grafana/provisioning/
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    networks:
      - my_network

  prometheus:
    image: prom/prometheus
    ports:
      - 9090:9090
    volumes:
      - ./grafana/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./prometheus:/prometheus
    networks:
      - my_network

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - 9990:8080
    environment:
      DYNAMIC_CONFIG_ENABLED: 'true'
    depends_on:
      - kafka
    networks:
      - my_network

volumes:
  mongodb:
  pg:
  redis:
  es_data:
    driver: local

networks:
  my_network:
    driver: bridge