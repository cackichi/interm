services:
  mongodb:
    image: mongo:latest
    container_name: mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: fedor
      MONGO_INITDB_ROOT_PASSWORD: fedor
    ports:
      - 27017:27017
    volumes:
      - ./mongodb-data:/data/db
    networks:
      - my_network

  pg1:
    image: postgres
    container_name: pg1

    environment:
      POSTGRES_USER: fedor
      POSTGRES_PASSWORD: fedor
      POSTGRES_DB: pg1
    volumes:
      - ./.pg1:/var/lib/postgresql1/data
    ports:
      - "5434:5432"
    networks:
      - my_network

  pg2:
    image: postgres
    container_name: pg2

    environment:
      POSTGRES_USER: fedor
      POSTGRES_PASSWORD: fedor
      POSTGRES_DB: pg2
    volumes:
      - ./.pg2:/var/lib/postgresql2/data
    ports:
      - "5436:5432"
    networks:
      - my_network

  keycloak:
    image: quay.io/keycloak/keycloak:25.0.2
    container_name: keycloak
    environment:
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://keycloakdb:5432/keycloakdb
      KC_DB_USERNAME: fedor
      KC_DB_PASSWORD: fedor

      KC_HOSTNAME: localhost
      KC_HOSTNAME_PORT: 7070
      KC_HOSTNAME_STRICT: false
      KC_HOSTNAME_STRICT_HTTPS: false

      KC_LOG_LEVEL: info
      KC_METRICS_ENABLED: true
      KC_HEALTH_ENABLED: true
      KEYCLOAK_ADMIN: fedor
      KEYCLOAK_ADMIN_PASSWORD: fedor
    command: start-dev
    depends_on:
      - keycloakdb
    ports:
      - '7070:7070'
    networks:
      - my_network

  keycloakdb:
    image: postgres
    container_name: keycloakdb
    volumes:
      - ./.keycloak:/var/lib/postgresql3/data
    environment:
      POSTGRES_DB: keycloakdb
      POSTGRES_USER: fedor
      POSTGRES_PASSWORD: fedor
    ports:
      - '5440:5432'
    networks:
      - my_network

  kafka:
    image: bitnami/kafka:latest
    ports:
      - '9092:9092'
    environment:
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_KRAFT_CLUSTER_ID=tLAFFbaIRKO2JNyRengxzQ
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9091
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9090,CONTROLLER://:9091,EXTERNAL://:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9090,EXTERNAL://${HOSTNAME:-localhost}:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
    volumes:
      - ./.kafka:/var/lib/kafka/data:/bitnami/kafka
    networks:
      - my_network

  redis:
    image: redis:latest
    container_name: redis
    environment:
      - REDIS_PASSWORD=fedor
      - REDIS_USER=fedor
      - REDIS_USER_PASSWORD=fedor
    ports:
      - "6380:6379"
    volumes:
      - ./redisdata:/data
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    command: >
      sh -c '
        mkdir -p /usr/local/etc/redis &&
        echo "bind 0.0.0.0" > /usr/local/etc/redis/redis.conf &&
        echo "requirepass fedor" >> /usr/local/etc/redis/redis.conf &&
        echo "appendonly yes" >> /usr/local/etc/redis/redis.conf &&
        echo "appendfsync everysec" >> /usr/local/etc/redis/redis.conf &&
        echo "user default on nopass ~* +@all" > /usr/local/etc/redis/users.acl &&
        echo "user fedor on >fedor ~* +@all" >> /usr/local/etc/redis/users.acl &&
        redis-server /usr/local/etc/redis/redis.conf --aclfile /usr/local/etc/redis/users.acl
      '
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "fedor", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    tty: true
    stdin_open: true
    networks:
      - my_network

  pg3:
    image: postgres
    container_name: pg3

    environment:
      POSTGRES_USER: fedor
      POSTGRES_PASSWORD: fedor
      POSTGRES_DB: pg3
    volumes:
      - ./.pg3:/var/lib/postgresql3/data
    ports:
      - "5438:5432"
    networks:
      - my_network

  pg4:
    image: postgres
    container_name: pg4

    environment:
      POSTGRES_USER: fedor
      POSTGRES_PASSWORD: fedor
      POSTGRES_DB: pg4
    volumes:
      - ./.pg4:/var/lib/postgresql4/data
    ports:
      - "5442:5432"
    networks:
      - my_network

  eureka-server:
    build:
      context: ./eureka-server
      dockerfile: Dockerfile
    container_name: eureka-server
    ports:
      - "8080:8080"
    networks:
      - my_network
    depends_on:
      - pg1
      - pg2
      - pg3
      - pg4
      - mongodb
      - kafka
      - redis

  driver-service:
      build:
        context: ./driver-service
        dockerfile: Dockerfile
      container_name: driver-service
      environment:
        SPRING_DATA_MONGODB_URI: "mongodb://fedor:fedor@mongodb:27017/drivers?authSource=admin"
        SPRING_DATA_MONGODB_HOST: mongodb
        SPRING_DATA_MONGODB_PORT: 27017
        SPRING_DATA_MONGODB_USERNAME: fedor
        SPRING_DATA_MONGODB_PASSWORD: fedor
        SPRING_DATA_MONGODB_DATABASE: drivers
        SPRING_DATA_MONGODB_AUTHENTICATION_DATABASE: admin
        SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9090
        EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE: http://eureka-server:8080/eureka
      networks:
        - my_network
      depends_on:
        - eureka-server
        - mongodb

  passenger-service:
      build:
        context: ./passenger-service
        dockerfile: Dockerfile
      container_name: passenger-service
      environment:
        SPRING_DATASOURCE_URL: jdbc:postgresql://pg1:5432/pg1
        SPRING_DATASOURCE_USERNAME: fedor
        SPRING_DATASOURCE_PASSWORD: fedor
        SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9090
        EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE: http://eureka-server:8080/eureka
      networks:
        - my_network
      depends_on:
        - eureka-server

  payment-service:
      build:
        context: ./payment-service
        dockerfile: Dockerfile
      container_name: payment-service
      environment:
        SPRING_DATASOURCE_URL: jdbc:postgresql://pg4:5432/pg4
        SPRING_DATASOURCE_USERNAME: fedor
        SPRING_DATASOURCE_PASSWORD: fedor
        SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9090
        EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE: http://eureka-server:8080/eureka
      networks:
        - my_network
      depends_on:
        - eureka-server

  rating-service:
      build:
        context: ./rating-service
        dockerfile: Dockerfile
      container_name: rating-service
      environment:
        SPRING_DATASOURCE_URL: jdbc:postgresql://pg3:5432/pg3
        SPRING_DATASOURCE_USERNAME: fedor
        SPRING_DATASOURCE_PASSWORD: fedor
        SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9090
        EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE: http://eureka-server:8080/eureka
      networks:
        - my_network
      depends_on:
        - eureka-server

  rides-service:
      build:
        context: ./rides-service
        dockerfile: Dockerfile
      container_name: rides-service
      environment:
        SPRING_DATASOURCE_URL: jdbc:postgresql://pg2:5432/pg2
        SPRING_DATASOURCE_USERNAME: fedor
        SPRING_DATASOURCE_PASSWORD: fedor
        SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9090
        EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE: http://eureka-server:8080/eureka
      networks:
        - my_network
      depends_on:
        - eureka-server

  gateway-service:
      build:
        context: ./gateway-service
        dockerfile: Dockerfile
      container_name: gateway-service
      environment:
        EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE: http://eureka-server:8080/eureka
        EUREKA_INSTANCE_PREFER_IP_ADDRESS: "true"
        SPRING_CLOUD_GATEWAY_DISCOVERY_LOCATOR_ENABLED: "true"
        SPRING_CLOUD_GATEWAY_DISCOVERY_LOCATOR_LOWER_CASE_SERVICE_ID: "true"
      ports:
        - "8081:8081"
      networks:
        - my_network
      depends_on:
        - eureka-server
        - passenger-service
        - driver-service
        - rides-service
        - rating-service
        - payment-service

volumes:
  mongodb:
  pg1:
  pg2:
  redis:
  pg4:
  pg3:
  keycloakdb:

networks:
  my_network:
    driver: bridge